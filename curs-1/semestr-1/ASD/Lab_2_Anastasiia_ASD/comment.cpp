#include <stdlib.h> //обьявление библиотеки stdlib.h содержит в себе функции, занимающиеся выделением памяти, контролем процесса выполнения программы
#include <iostream> //объявление библиотеки iostream ввод вывод данных

struct TwoInts // объявление стуктуры TwoInts 
{
    int a; // компонент структуры 
    int b; // компонент структуры
};

struct StructWithArray // объявление структуры StructWithArray 
{
    int arr[4]; // задаем маассив максимальное количество элементов которго 4
    int* someNumber; // задаем указатель на целое число//
};

int main() //начало работы программы 
{
    TwoInts i2 = { }; //объявлем переменную TwoInts под названием i2 пустой 
    i2.a = 5; // задаем значение к переменной i2.a = 5 
    i2.b = 7; // задаем значение к переменной i2.b = 7 

    std::cout << i2.a << std::endl; // выводим на экран заданное значение переменной i2.a 
    std::cout << i2.b << std::endl; // выводим на экран заданное значение переменной i2.b 
    
    StructWithArray s = { }; // объявлем переменную StructWithArray под названием s пустой 
    s.arr[0] = 10; // в переменной s в массив arr в ячейку памяти с индексом 0 задаем значение 10 

    StructWithArray s1 = { }; // объявлем переменную StructWithArray под названием s1 пустой 
    s1.arr[0] = 15; // в переменной s1 в массив arr в ячейку памяти с индексом 0 задаем значение 15 

    StructWithArray* sPointer = &s; // объявляем переменну sPointer которая содержит адрес переменной s 
    sPointer->arr[0] = 20; // через зданный путь меняем значения ячейки памяти 0 в переменной s задаем значение 20 

    std::cout << s.arr[0] << std::endl; // выводим на экран новый результат 
    s.arr[0] = 25; // в переменной s ячейку памяти 0 задаем значение 25 
    std::cout << s.arr[0] << std::endl; // выводим на экран новый результат, что показывает что мы можем задавать значение переменной s как напрямую так и через указатель
    sPointer->arr[0] = 30; //в переменной s ячейку памяти 0 задаем значение 30 через указатель 
    std::cout << s.arr[0] << std::endl; // выводим на экран 

    sPointer = &s1; // записываем в переменную sPointer адрес переменной s1 
    sPointer->arr[0] = 35; // в переменной s1 ячейку памяти 0 задаем значение 35
    std::cout << s.arr[0] << std::endl; //  выводим на экран 
    std::cout << s1.arr[0] << std::endl; // выводим на экран 

    StructWithArray structArray[2] = { }; // создаем массив с двумя элементами structArray 
    structArray[0].arr[3] = 77; // в элементе structArray [0] в массиве arr в ячейке памяти 3 задать значение элементу 77 
    structArray[1].someNumber = &structArray[0].arr[3]; // задаем адрес с элемента structArray [1] переменной someNumber в ячейку 3 в массиве arr элемента structArray [0] 

    std::cout << *structArray[1].someNumber << std::endl; // выводим результат на экран 

    sPointer = &s; // задаем в переменной sPointer адрес к переменной s 
    int* pointer = &sPointer->arr[3]; // задаем в переменной рointer адрес в массив arr к ячейке памяти 3 переменной s 
    s.arr[3] = 72; // задаем ячейке памяти 3 значение 72 
    std::cout << *pointer; // выводим результат на экран задовая путь 

    StructWithArray memory;
    memset(&memory, 0, sizeof(StructWithArray));
    return 0;
}